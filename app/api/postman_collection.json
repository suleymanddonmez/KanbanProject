{
	"info": {
		"_postman_id": "604610d6-d549-4a49-8f24-4c061907d854",
		"name": "Kanban Project",
		"description": "## Kanban Task Project\n\nThis project is a Kanban Task application developed using Next.js, a framework for React, and MongoDB as the database. The project is deployed using the Vercel Platform.\n\n### Technologies Used\n\n- **Next.js:** This project is built using Next.js, a powerful React framework that enables server-side rendering and static site generation. It provides great performance and SEO benefits.\n    \n- **React:** Next.js is built on top of React, a popular JavaScript library for building user interfaces. React allows us to create reusable UI components.\n    \n- **TypeScript:** TypeScript is used to enhance the development experience by providing static type checking, which helps in catching errors early and improves code quality and maintainability.\n    \n- **Tailwind CSS:** Tailwind CSS is a utility-first CSS framework used in this project to create a highly customizable and responsive design. It allows for rapid UI development with minimal custom CSS.\n    \n- **MongoDB and Mongoose:** MongoDB is the database used for storing project, task list, and task data. Mongoose is an object data modeling (ODM) library for MongoDB and Node.js. It provides a straightforward, schema-based solution to model application data, making data validation and querying easier.\n    \n\nYou can access the live version of the project through the following link:\n\n- [Kanban Project](https://kanban-project-lake.vercel.app/)\n    \n\n### Features\n\n- **Built with Next.js:** Developed using Next.js, a modern and fast React framework.\n    \n- **3 Main Models:** Consists of 3 main models: Project, TaskList, and Task.\n    \n- **Jira-Like Kanban Task Management:** Each project provides a Jira-like kanban task management system where you can view task lists and tasks within the project.\n    \n- **Connected Data Structure:** Task lists are associated with projects, and tasks are associated with task lists.\n    \n- **Project List Page:** All projects are listed on the project homepage with their names.\n    \n- **Project Pages:** Separate pages are available for each project. These pages list the task lists belonging to the project, and each task list can display its own tasks.\n    \n- **Dynamic Task Management:** You can edit, delete, and drag-and-drop tasks within a task list to reorder them. Additionally, tasks can be dragged and dropped to another task list.\n    \n- **Responsive Design:** The project features a responsive design that adapts to all devices.\n    \n- **Recently Visited Pages:** Recently visited pages within the project are stored in local storage and displayed in the footer area.\n    \n\n### Getting Started\n\nTo run the project, follow these steps:\n\n1. git clone https://github.com/suleymanddonmez/KanbanProject.git\n    \n2. npm install\n    \n3. //.env file contentCONNECTIONSTR=mongodb+srv://:@.mongodb.net/?retryWrites=true&w=majority&appName=...\n    \n4. npm run dev\n    \n5. Open [http://localhost:3000](http://localhost:3000/) in your browser to see the result.\n    \n\n### Resources\n\nTo learn more about the technologies used in this project, you can explore the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - Learn about Next.js features and API.\n    \n- [Learn Next.js](https://nextjs.org/learn) - Interactive Next.js tutorial.\n    \n- [Next.js GitHub Repository](https://github.com/vercel/next.js/) - Your feedback and contributions are welcome!\n    \n- [React Documentation](https://reactjs.org/docs/getting-started.html) - Learn about React, the library that Next.js is built upon.\n    \n- [TypeScript Documentation](https://www.typescriptlang.org/docs/) - Learn about TypeScript, the superset of JavaScript that adds static types.\n    \n- [Tailwind CSS Documentation](https://tailwindcss.com/docs) - Learn about Tailwind CSS, the utility-first CSS framework.\n    \n- [MongoDB Documentation](https://www.mongodb.com/docs) - Learn about MongoDB features and connections.\n    \n- [Mongoose Documentation](https://mongoosejs.com/docs/guide.html) - Learn about Mongoose, the object modeling tool for MongoDB.\n    \n\n### Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n\n### Contributing\n\nIf you'd like to contribute to this project, please fork the repository and use a feature branch. Pull requests are warmly welcome.\n\n1. Fork the repository.\n    \n2. Create a new feature branch.\n    \n3. Commit your changes.\n    \n4. Push to the branch.\n    \n5. Create a new pull request.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17672953"
	},
	"item": [
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects"
							]
						},
						"description": "**Get All Projects:**  \n_Description:_ This GET request is used to fetch all projects in an application. Since it's a GET request, there is no request body.  \n_Success Status:_ A successful GET response typically has a status code of 200 OK and may contain JSON data in the response body."
					},
					"response": []
				},
				{
					"name": "Get Project By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/projects/6667367d7007c241269b1152",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"6667367d7007c241269b1152"
							]
						},
						"description": "**Get Project By Id:**  \n_Description:_ This GET request is used to retrieve information about a specific project. Similarly, this is also a GET request and doesn't have a request body. The id information should be appended to the URL path.  \n_Success Status:_ A successful GET response usually has a status code of 200 OK and may contain JSON data in the response body."
					},
					"response": []
				},
				{
					"name": "Create New Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"New Project 33\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects"
							]
						},
						"description": "**Create New Project:**  \n_Description:_ This POST request is used to send data to an API. This request sends JSON data, and the response reflects this data.  \n_Success Status:_ A successful POST request generally returns with a status code of 200 OK or 201 Created."
					},
					"response": []
				},
				{
					"name": "Delete Project By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/projects/6667370c0ff9ee53c526a97d",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"6667370c0ff9ee53c526a97d"
							]
						},
						"description": "**Delete Project By Id:**  \n_Description:_ This DELETE request is used to delete previously created data. The id information should be appended to the URL path.  \n_Success Status:_ A successful DELETE request typically returns with a status code of 200 OK, 202 Accepted, or 204 No Content."
					},
					"response": []
				},
				{
					"name": "Update Tasks in Project By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"project\": {\n        \"id\": \"6667367d7007c241269b1152\",\n        \"key\": \"new-project-2\",\n        \"title\": \"New Project 2\",\n        \"items\": [\n            {\n                \"id\": \"6667367e7007c241269b115e\",\n                \"key\": \"backlog\",\n                \"title\": \"Backlog\",\n                \"projectId\": \"6667367d7007c241269b1152\",\n                \"items\": []\n            },\n            {\n                \"id\": \"6667367e7007c241269b1160\",\n                \"key\": \"to-do\",\n                \"title\": \"To do\",\n                \"projectId\": \"6667367d7007c241269b1152\",\n                \"items\": [\n                    {\n                        \"id\": \"6667368a7007c241269b116d\",\n                        \"title\": \"asdasdasd\",\n                        \"description\": \"asdasd\",\n                        \"tags\": [],\n                        \"color\": \"red-500\",\n                        \"taskListId\": \"6667367e7007c241269b1160\"\n                    }\n                ]\n            },\n            {\n                \"id\": \"6667367e7007c241269b1162\",\n                \"key\": \"in-progress\",\n                \"title\": \"In progress\",\n                \"projectId\": \"6667367d7007c241269b1152\",\n                \"items\": []\n            },\n            {\n                \"id\": \"6667367e7007c241269b115c\",\n                \"key\": \"designed\",\n                \"title\": \"Designed\",\n                \"projectId\": \"6667367d7007c241269b1152\",\n                \"items\": []\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/projects/6667367d7007c241269b1152",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"6667367d7007c241269b1152"
							]
						},
						"description": "**Update Tasks in Project By Id:**  \n_Description:_ This PATCH request is used to update existing data. This service allows updating tasks by using drag and drop, altering the associated Task List information or changing the order of tasks within a Task List. The id information should be appended to the URL path.  \n_Success Status:_ A successful PUT request generally returns with a status code of 200 OK, 201 Created, or 204 No Content."
					},
					"response": []
				}
			],
			"description": "**Get All Projects:**  \n_Description:_ This GET request is used to fetch all projects in an application. Since it's a GET request, there is no request body.  \n_Success Status:_ A successful GET response typically has a status code of 200 OK and may contain JSON data in the response body.\n\n**Get Project By Id:**  \n_Description:_ This GET request is used to retrieve information about a specific project. Similarly, this is also a GET request and doesn't have a request body. The id information should be appended to the URL path.  \n_Success Status:_ A successful GET response usually has a status code of 200 OK and may contain JSON data in the response body.\n\n**Create New Project:**  \n_Description:_ This POST request is used to send data to an API. This request sends JSON data, and the response reflects this data.  \n_Success Status:_ A successful POST request generally returns with a status code of 200 OK or 201 Created.\n\n**Delete Project By Id:**  \n_Description:_ This DELETE request is used to delete previously created data. The id information should be appended to the URL path.  \n_Success Status:_ A successful DELETE request typically returns with a status code of 200 OK, 202 Accepted, or 204 No Content.\n\n**Update Tasks in Project By Id:**  \n_Description:_ This PATCH request is used to update existing data. This service allows updating tasks by using drag and drop, altering the associated Task List information or changing the order of tasks within a Task List. The id information should be appended to the URL path.  \n_Success Status:_ A successful PUT request generally returns with a status code of 200 OK, 201 Created, or 204 No Content."
		},
		{
			"name": "TaskLists",
			"item": [
				{
					"name": "Get All TaskLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/taskLists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"taskLists"
							]
						},
						"description": "**Get All TaskLists**:  \n_Description:_ This GET request is used to fetch all task lists in an application. Since it's a GET request, there is no request body.  \n_Success Status:_ A successful GET response typically has a status code of 200 OK and may contain JSON data in the response body."
					},
					"response": []
				},
				{
					"name": "Get TaskList By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/taskLists/6666f967a149e14e2e550f43",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"taskLists",
								"6666f967a149e14e2e550f43"
							]
						},
						"description": "**Get TaskList By Id**:  \n_Description:_ This GET request is used to retrieve information about a specific task list. Similarly, this is also a GET request and doesn't have a request body. The id information should be appended to the URL path.  \n_Success Status:_ A successful GET response usually has a status code of 200 OK and may contain JSON data in the response body."
					},
					"response": []
				},
				{
					"name": "Get TaskLists By ProjectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/taskLists/filter/6667367d7007c241269b1152",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"taskLists",
								"filter",
								"6667367d7007c241269b1152"
							]
						},
						"description": "**Get TaskLists By ProjectId**:  \n_Description:_ This GET request is used to fetch task lists belonging to a specific project. This is also a GET request and doesn't have a request body. The id information should be appended to the URL path.  \n_Success Status:_ A successful GET response typically has a status code of 200 OK and may contain JSON data in the response body."
					},
					"response": []
				},
				{
					"name": "Create New TaskList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"TaskList 33\",\n    \"projectId\": \"6667367d7007c241269b1152\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/taskLists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"taskLists"
							]
						},
						"description": "**Create New TaskList**:  \n_Description:_ This POST request is used to send data to an API. This request sends JSON data, and the response reflects this data.  \n_Success Status:_ A successful POST request generally returns with a status code of 200 OK or 201 Created."
					},
					"response": []
				},
				{
					"name": "Delete TaskList By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/taskLists/6667390a546c9c394b7b648b",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"taskLists",
								"6667390a546c9c394b7b648b"
							]
						},
						"description": "**Delete TaskList By Id**:  \n_Description:_ This DELETE request is used to delete previously created data. The id information should be appended to the URL path.  \n_Success Status:_ A successful DELETE request typically returns with a status code of 200 OK, 202 Accepted, or 204 No Content."
					},
					"response": []
				},
				{
					"name": "Delete TaskLists By ProjectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/taskLists/filter/6667367d7007c241269b1152",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"taskLists",
								"filter",
								"6667367d7007c241269b1152"
							]
						},
						"description": "**Delete TaskLists By ProjectId**:  \n_Description:_ This DELETE request is used to delete previously created data. The id information should be appended to the URL path.  \n_Success Status:_ A successful DELETE request typically returns with a status code of 200 OK, 202 Accepted, or 204 No Content."
					},
					"response": []
				}
			],
			"description": "**Get All TaskLists**:  \n_Description:_ This GET request is used to fetch all task lists in an application. Since it's a GET request, there is no request body.  \n_Success Status:_ A successful GET response typically has a status code of 200 OK and may contain JSON data in the response body.\n\n**Get TaskList By Id**:  \n_Description:_ This GET request is used to retrieve information about a specific task list. Similarly, this is also a GET request and doesn't have a request body. The id information should be appended to the URL path.  \n_Success Status:_ A successful GET response usually has a status code of 200 OK and may contain JSON data in the response body.\n\n**Get TaskLists By ProjectId**:  \n_Description:_ This GET request is used to fetch task lists belonging to a specific project. This is also a GET request and doesn't have a request body. The id information should be appended to the URL path.  \n_Success Status:_ A successful GET response typically has a status code of 200 OK and may contain JSON data in the response body.\n\n**Create New TaskList**:  \n_Description:_ This POST request is used to send data to an API. This request sends JSON data, and the response reflects this data.  \n_Success Status:_ A successful POST request generally returns with a status code of 200 OK or 201 Created.\n\n**Delete TaskList By Id**:  \n_Description:_ This DELETE request is used to delete previously created data. The id information should be appended to the URL path.  \n_Success Status:_ A successful DELETE request typically returns with a status code of 200 OK, 202 Accepted, or 204 No Content.\n\n**Delete TaskLists By ProjectId**:  \n_Description:_ This DELETE request is used to delete previously created data. The id information should be appended to the URL path.  \n_Success Status:_ A successful DELETE request typically returns with a status code of 200 OK, 202 Accepted, or 204 No Content."
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Get All Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "**Get All Tasks**:  \n_Description:_ This GET request is used to retrieve all tasks from an endpoint. There is no request body for a GET request.  \n_Success Status:_ A successful GET response typically returns with a status code of 200 OK and may include HTML web content or JSON data in the response body."
					},
					"response": []
				},
				{
					"name": "Get Task By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/tasks/66673a62546c9c394b7b6494",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks",
								"66673a62546c9c394b7b6494"
							]
						},
						"description": "**Get Task By Id**:  \n_Description:_ This GET request is used to fetch information about a specific task. Similarly to other GET requests, it doesn't have a request body, but the id information should be included in the URL path.  \n_Success Status:_ A successful GET response typically returns with a status code of 200 OK and may include HTML web content or JSON data in the response body."
					},
					"response": []
				},
				{
					"name": "Get Tasks By TaskListId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/tasks/filter/66673a007007c241269b1186",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks",
								"filter",
								"66673a007007c241269b1186"
							]
						},
						"description": "**Get Tasks By TaskListId**:  \n_Description:_ This GET request is used to retrieve tasks belonging to a specific task list. This is a GET request and doesn't have a request body. The task list id information should be appended to the URL path.  \n_Success Status:_ A successful GET response typically returns with a status code of 200 OK and may include HTML web content or JSON data in the response body."
					},
					"response": []
				},
				{
					"name": "Create New Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Twillo integration\",\n    \"description\": \"Create new note via SMS. Support text, audio, links, and media.\",\n    \"tags\": [],\n    \"color\": \"purple-500\",\n    \"taskListId\": \"66673a007007c241269b1186\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "**Create New Task**:  \n_Description:_ This POST request is used to submit new task data to the API via the request body. It submits JSON data, and the response reflects this data.  \n_Success Status:_ A successful POST request typically returns with a status code of 200 OK or 201 Created."
					},
					"response": []
				},
				{
					"name": "Delete Task By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/66673a62546c9c394b7b6494",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks",
								"66673a62546c9c394b7b6494"
							]
						},
						"description": "**Delete Task By Id**:  \n_Description:_ This DELETE request is used to delete previously created task data. The id information should be included in the URL path.  \n_Success Status:_ A successful DELETE request typically returns with a status code of 200 OK, 202 Accepted, or 204 No Content."
					},
					"response": []
				},
				{
					"name": "Delete Tasks By TaskListId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/filter/66673a007007c241269b1186",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks",
								"filter",
								"66673a007007c241269b1186"
							]
						},
						"description": "**Delete Tasks By TaskListId**:  \n_Description:_ This DELETE request is used to delete previously created tasks belonging to a specific task list. The task list id information should be included in the URL path.  \n_Success Status:_ A successful DELETE request typically returns with a status code of 200 OK, 202 Accepted, or 204 No Content."
					},
					"response": []
				},
				{
					"name": "Update Task By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"task\": {\n        \"title\": \"sds54651651ds\",\n        \"description\": \"asdasd\",\n        \"tags\": [\n            \"Note interface\"\n        ],\n        \"color\": \"red-500\",\n        \"taskListId\": \"66673a007007c241269b1186\"\n    },\n    \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/66673a077007c241269b118d",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tasks",
								"66673a077007c241269b118d"
							]
						},
						"description": "**Update Task By Id**:  \n_Description:_ This PATCH request is used to update existing task data. It overwrites the existing data with the new data provided in the request body. The task id information should be included in the URL path.  \n_Success Status:_ A successful PATCH request typically returns with a status code of 200 OK, 201 Created, or 204 No Content."
					},
					"response": []
				}
			],
			"description": "**Get All Tasks**:  \n_Description:_ This GET request is used to retrieve all tasks from an endpoint. There is no request body for a GET request.  \n_Success Status:_ A successful GET response typically returns with a status code of 200 OK and may include HTML web content or JSON data in the response body.\n\n**Get Task By Id**:  \n_Description:_ This GET request is used to fetch information about a specific task. Similarly to other GET requests, it doesn't have a request body, but the id information should be included in the URL path.  \n_Success Status:_ A successful GET response typically returns with a status code of 200 OK and may include HTML web content or JSON data in the response body.\n\n**Get Tasks By TaskListId**:  \n_Description:_ This GET request is used to retrieve tasks belonging to a specific task list. This is a GET request and doesn't have a request body. The task list id information should be appended to the URL path.  \n_Success Status:_ A successful GET response typically returns with a status code of 200 OK and may include HTML web content or JSON data in the response body.\n\n**Create New Task**:  \n_Description:_ This POST request is used to submit new task data to the API via the request body. It submits JSON data, and the response reflects this data.  \n_Success Status:_ A successful POST request typically returns with a status code of 200 OK or 201 Created.\n\n**Delete Task By Id**:  \n_Description:_ This DELETE request is used to delete previously created task data. The id information should be included in the URL path.  \n_Success Status:_ A successful DELETE request typically returns with a status code of 200 OK, 202 Accepted, or 204 No Content.\n\n**Delete Tasks By TaskListId**:  \n_Description:_ This DELETE request is used to delete previously created tasks belonging to a specific task list. The task list id information should be included in the URL path.  \n_Success Status:_ A successful DELETE request typically returns with a status code of 200 OK, 202 Accepted, or 204 No Content.\n\n**Update Task By Id**:  \n_Description:_ This PATCH request is used to update existing task data. It overwrites the existing data with the new data provided in the request body. The task id information should be included in the URL path.  \n_Success Status:_ A successful PATCH request typically returns with a status code of 200 OK, 201 Created, or 204 No Content."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://kanban-project-lake.vercel.app"
		},
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string",
			"disabled": true
		}
	]
}